---

- name: Verify haproxy setup
  hosts: all
  pre_tasks:
    - name: Debian | set facts
      set_fact:
        verify_pkgs:
          - haproxy
          - rsyslogd
        verify_cfg: /etc/haproxy/haproxy.cfg
        verify_cfg_t: /usr/sbin/haproxy -c -V -f /etc/haproxy/haproxy.cfg
        verify_ps: haproxy
        title_root: '<title>Apache2 Ubuntu Default Page: It works</title>'
        status_root: '503'
        json_log: /var/log/haproxy-traffic.log
      when: ansible_os_family == "Debian"
    - name: RedHat | set facts
      set_fact:
        verify_pkgs:
          - haproxy
          - rsyslog
        verify_cfg: /etc/haproxy/haproxy.cfg
        verify_cfg_t: /usr/sbin/haproxy -c -V -f /etc/haproxy/haproxy.cfg
        verify_ps: haproxy
        title_root: '<title>Apache HTTP Server Test Page powered by CentOS</title>'
        status_root: '503'
        json_log: /var/log/haproxy-traffic.log
      when: ansible_os_family == "RedHat"
  tasks:
    - name: Gather package facts
      package_facts:
        manager: auto
    - name: Validate that needed packages are present
      assert:
        that: ansible_facts.packages[item]
      with_items: "{{ verify_pkgs }}"

    - name: Ensure config is present
      stat:
        path: "{{ verify_cfg }}"
      register: cfg
      become: true
    - name: Validate config present
      assert:
        that: cfg.stat.exists and cfg.stat.size != 0
    - name: Ensure process is running
      command: "pgrep -u root {{ verify_ps }}"
      register: ps
      changed_when: false
    - name: Validate ps output
      assert:
        that: ps.stdout
    - name: Ensure ports are listening
      wait_for:
        host: "{{ item.h }}"
        port: "{{ item.p }}"
        timeout: 10
      with_items:
        - {h: 'localhost', p: 80}

    - name: Test config
      command: "{{ verify_cfg_t }}"
      register: conftest
      changed_when: false
    - name: Validate conf test output
      assert:
        that: >
          "'Syntax OK' in conftest.stderr"

    - name: Fetch web1
      uri:
        url: http://localhost/
        validate_certs: false
        return_content: true
        method: GET
        status_code: "{{ status_root }}"
      register: web1
    - name: Validate web1
      assert:
        that: >
          "title_root in web1.content"
    - name: Fetch web2
      uri:
        url: http://localhost/
        validate_certs: false
        return_content: true
        method: HEAD
        status_code: "{{ status_root }}"
      register: web2
    - name: Fetch web3
      uri:
        url: http://localhost/
        validate_certs: false
        return_content: true
        method: OPTIONS
        status_code: "{{ status_root }}"
      register: web3
    - name: Validate web3
      assert:
        that: >
          "'<h1>503 Service Unavailable</h1>' in web3.content"
    - name: Fetch web4
      uri:
        url: http://localhost/nonexistent
        validate_certs: false
        return_content: true
        method: GET
        status_code: "{{ status_root }}"
      register: web4
    - name: Validate web4
      assert:
        that: >
          "'<h1>503 Service Unavailable</h1>' in web4.content"
    - name: Fetch web5
      uri:
        url: http://localhost/?a=b&c=d
        validate_certs: false
        method: GET
        status_code: "{{ status_root }}"
        headers:
          X-Forwarded-For: 127.0.0.127
          Referer: http://www.example.com
      register: web5
    - name: Fetch content of log
      slurp:
        src: "{{ json_log }}"
      register: jsonlog
    - name: temporary variable
      set_fact:
        jsonlog_str: "{{ jsonlog['content'] | b64decode }}"
    - name: Display json log file content
      debug:
        msg: "{{ jsonlog_str.split('\n') }}"
    - name: Validate jsonlog
      assert:
        that: >
          "'\"vhost\":\"localhost\", \"xff\":\"127.0.0.127\"' in jsonlog['content'] | b64decode and
          '\"http_referer\":\"http://www.example.com\", \"vhost\":\"localhost.0.0.127\"' in jsonlog['content'] | b64decode and
          '\"request\":\"OPTIONS / HTTP/1.1\"' in jsonlog['content'] | b64decode"
